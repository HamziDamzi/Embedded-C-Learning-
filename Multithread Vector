/*
Develop a multithreaded program using Pthreads that randomly initializes two vectors of a given length and adds the corresponding elements.
*/
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>
#include <stdio.h>
#include <math.h>
#ifndef NUM_THREADS
#define NUM_THREADS 4
#endif
#define LENGTH 15

pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
int dataarray[LENGTH];
int dataarray_b[LENGTH];
int dataarray_c[LENGTH];

typedef struct threadinfo
{
   int startingpoint;
   int endingpoint;
   int threadid; /* data */
}threadinfo;



void *thread_function(void* args){
    	int i=0;
        


       
        threadinfo *THREAD = (threadinfo*)args;
        
    pthread_mutex_lock(&mutex);
        
        int start=THREAD->startingpoint;
        int end=THREAD->endingpoint;
        
    	for (i = start; i <end ; ++i) {
        	
            
            dataarray_c[i] = dataarray[i] + dataarray_b[i];
            
    	}
    pthread_mutex_unlock(&mutex);    	
    return NULL;

}

int * populate(int *target){
int i=0;
for ( i = 0; i < (LENGTH); i++) //populating an array
    {
        target[i]= rand()%15;
        
    }
    return 0;

}

int main() {
    int i=0;
    
    
    populate(dataarray);
    populate(dataarray_b);
    

    pthread_t threads[NUM_THREADS];
    struct threadinfo THREAD[NUM_THREADS];

    for (i = 0; i < NUM_THREADS; ++i) {
            THREAD[i].startingpoint=i*NUM_THREADS;
            THREAD[i].endingpoint=(i*NUM_THREADS)+(floor(LENGTH/NUM_THREADS)+1);
            THREAD[i].threadid=i;
        
        printf("%d\n",THREAD[i].startingpoint);
         int rc = pthread_create(&threads[i],NULL,thread_function,(void *)&THREAD[i]);
        if (rc != 0) {
            printf("Thread creation failed");
            exit(-1);
        }



    }

    for (i = 0; i < NUM_THREADS; ++i) {
        pthread_join(threads[i], NULL);
        

    }

    for (i=0 ; i < LENGTH; i++)
    {
        printf("\n%d + %d is:%d\n",dataarray[i],dataarray_b[i],dataarray_c[i]);
    }
    

    pthread_mutex_destroy(&mutex);

    exit(EXIT_SUCCESS);
}
